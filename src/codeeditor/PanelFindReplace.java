/*
 * To change this template, choose Tools | Templates and open the template in
 * the editor.
 */
package codeeditor;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.ListIterator;
import javax.swing.JTextPane;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;
/**
 *
 * @author norps
 */
public class PanelFindReplace extends javax.swing.JPanel {
       
    JTextPane textPane;
    Matcher matcher;
    Highlighter hilit;
    DialogFindReplace findreplace;
    private int offset=0;
    private int offsetReplace=0;
    private int caretposition;
    final Highlighter.HighlightPainter painter;
    final static Color  HILIT_COLOR = Color.LIGHT_GRAY;
    Pattern pattern;
    String textFind;
    private int cnt=0;
    /**
     * Creates new form PanelFindReplace
     */
    public PanelFindReplace(JTextPane textPane,Highlighter hilit,DialogFindReplace findreplace) {
        initComponents();
        this.textPane=textPane;
        this.findreplace=findreplace;
        painter = new DefaultHighlighter.DefaultHighlightPainter(HILIT_COLOR);
        this.hilit=hilit;   

    }
    
    private void initiate(){
        textFind=(String)cmbFind.getSelectedItem();
        int flag=0;
        
        if(!optSearchRegularExpression.isSelected())     
            flag=Pattern.LITERAL;
        
        if(!chkMatchCase.isSelected())     
           flag=flag+Pattern.CASE_INSENSITIVE;
        
        if(flag==0)     
            pattern = Pattern.compile(textFind);
        else
            pattern = Pattern.compile(textFind,flag);
        
        
        matcher = pattern.matcher(textPane.getText());
    }
    
    private void find(boolean findAll){
        boolean found=false;
        hilit.removeAllHighlights();
        initiate();
        offsetReplace=caretposition;
        while(matcher.find(offset)){  
           offset=matcher.end();
            if(!findAll)    caretposition=offset;
            try{
                hilit.addHighlight(matcher.start(), offset, painter);
                textPane.setCaretPosition(offset);
            } catch (BadLocationException e) {
                e.printStackTrace();
            }     
            found=true;
            cnt++;
            if(!findAll)    break;
        }
        if(!found){
                JOptionPane.showMessageDialog(this, "Can't find the text:\n" + textFind , "Find", JOptionPane.PLAIN_MESSAGE);
                caretposition=offset=0;
            }
    }
    
    void panelFind(){
                
                lblReplace.setVisible(false);
                cmbReplace.setVisible(false);
                btnReplace.setVisible(false);
                btnReplaceAll.setVisible(false);
                btnCount.setVisible(true);
                btnCount.setBounds(509, 82, 133, 25);
                btnFindAll.setVisible(true);
                btnFindAll.setBounds(509, 114, 133, 25);
            
        }
        
        void panelReplace(){
            btnCount.setVisible(false);
            btnFindAll.setVisible(false);
            lblReplace.setVisible(true);
            cmbReplace.setVisible(true);
            btnReplace.setVisible(true);
            btnReplace.setBounds(509, 82, 133, 25);
            btnReplaceAll.setVisible(true);
            btnReplaceAll.setBounds(509, 114, 133, 25);
            
        }
            

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        optGroupDirection = new javax.swing.ButtonGroup();
        optGroupSearchMode = new javax.swing.ButtonGroup();
        lblFind = new javax.swing.JLabel();
        cmbFind = new javax.swing.JComboBox();
        btnFindNext = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        chkMatchCase = new javax.swing.JCheckBox();
        lpaneSearchMode = new javax.swing.JLayeredPane();
        optSearchNormal = new javax.swing.JRadioButton();
        optSearchRegularExpression = new javax.swing.JRadioButton();
        btnReplaceAll = new javax.swing.JButton();
        btnReplace = new javax.swing.JButton();
        cmbReplace = new javax.swing.JComboBox();
        lblReplace = new javax.swing.JLabel();
        btnCount = new javax.swing.JButton();
        btnFindAll = new javax.swing.JButton();

        setLayout(null);

        lblFind.setText("Find What:");
        add(lblFind);
        lblFind.setBounds(70, 70, 63, 16);

        cmbFind.setEditable(true);
        add(cmbFind);
        cmbFind.setBounds(140, 63, 333, 30);

        btnFindNext.setText("Find Next");
        btnFindNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindNextActionPerformed(evt);
            }
        });
        add(btnFindNext);
        btnFindNext.setBounds(509, 50, 133, 25);

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        add(btnClose);
        btnClose.setBounds(509, 146, 133, 25);

        chkMatchCase.setText("Match Case");
        add(chkMatchCase);
        chkMatchCase.setBounds(330, 200, 95, 25);

        lpaneSearchMode.setBorder(javax.swing.BorderFactory.createTitledBorder("Search Mode"));

        optGroupSearchMode.add(optSearchNormal);
        optSearchNormal.setSelected(true);
        optSearchNormal.setText("Normal");
        optSearchNormal.setBounds(10, 20, 69, 25);
        lpaneSearchMode.add(optSearchNormal, javax.swing.JLayeredPane.DEFAULT_LAYER);

        optGroupSearchMode.add(optSearchRegularExpression);
        optSearchRegularExpression.setText("Regular Expression");
        optSearchRegularExpression.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optSearchRegularExpressionActionPerformed(evt);
            }
        });
        optSearchRegularExpression.setBounds(10, 50, 150, 25);
        lpaneSearchMode.add(optSearchRegularExpression, javax.swing.JLayeredPane.DEFAULT_LAYER);

        add(lpaneSearchMode);
        lpaneSearchMode.setBounds(80, 170, 204, 84);

        btnReplaceAll.setText("Replace All");
        btnReplaceAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReplaceAllActionPerformed(evt);
            }
        });
        add(btnReplaceAll);
        btnReplaceAll.setBounds(509, 229, 130, 25);

        btnReplace.setText("Replace");
        btnReplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReplaceActionPerformed(evt);
            }
        });
        add(btnReplace);
        btnReplace.setBounds(509, 189, 130, 25);

        cmbReplace.setEditable(true);
        add(cmbReplace);
        cmbReplace.setBounds(140, 110, 333, 30);

        lblReplace.setText("Replace With:");
        add(lblReplace);
        lblReplace.setBounds(50, 120, 80, 16);

        btnCount.setText("Count");
        btnCount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCountActionPerformed(evt);
            }
        });
        add(btnCount);
        btnCount.setBounds(509, 82, 133, 25);

        btnFindAll.setText("Find All");
        btnFindAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindAllActionPerformed(evt);
            }
        });
        add(btnFindAll);
        btnFindAll.setBounds(509, 114, 133, 25);
    }// </editor-fold>//GEN-END:initComponents

    private void optSearchRegularExpressionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optSearchRegularExpressionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_optSearchRegularExpressionActionPerformed

    private void btnFindNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindNextActionPerformed
      if(cmbFind.getSelectedItem()!=null){
          offset=caretposition;
          find(false);
          
       for(int i=0;i<cmbFind.getItemCount();i++)
           if(cmbFind.getItemAt(i)==cmbFind.getSelectedItem()) return;
       cmbFind.addItem(cmbFind.getSelectedItem());
      } 
    }//GEN-LAST:event_btnFindNextActionPerformed

    private void btnFindAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindAllActionPerformed
         if(cmbFind.getSelectedItem()!=null){
                offset=0;
                find(true);
         }
    }//GEN-LAST:event_btnFindAllActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
            findreplace.close();
      
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnCountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCountActionPerformed
         if(cmbFind.getSelectedItem()!=null){
                cnt=0;
                offset=0;
                find(true);
                hilit.removeAllHighlights();
                JOptionPane.showMessageDialog(this, cnt +  "match(es) to occurrence(s)" , "Count", JOptionPane.PLAIN_MESSAGE);
         }
    }//GEN-LAST:event_btnCountActionPerformed

    private void btnReplaceAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReplaceAllActionPerformed
        if(cmbFind.getSelectedItem()!=null && cmbReplace.getSelectedItem()!=null){
            initiate();
            textPane.setText(matcher.replaceAll((String)cmbReplace.getSelectedItem()));
        }
        
    }//GEN-LAST:event_btnReplaceAllActionPerformed

    private void btnReplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReplaceActionPerformed
        if(cmbFind.getSelectedItem()!=null && cmbReplace.getSelectedItem()!=null){
            StringBuffer sb = new StringBuffer();
            initiate();
            find(false);
            matcher.appendReplacement(sb, (String)cmbReplace.getSelectedItem());
            matcher.appendTail(sb);
            textPane.setText(sb.toString());
            
        }
    }//GEN-LAST:event_btnReplaceActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    protected javax.swing.JButton btnCount;
    protected javax.swing.JButton btnFindAll;
    private javax.swing.JButton btnFindNext;
    protected javax.swing.JButton btnReplace;
    protected javax.swing.JButton btnReplaceAll;
    private javax.swing.JCheckBox chkMatchCase;
    private javax.swing.JComboBox cmbFind;
    protected javax.swing.JComboBox cmbReplace;
    private javax.swing.JLabel lblFind;
    protected javax.swing.JLabel lblReplace;
    private javax.swing.JLayeredPane lpaneSearchMode;
    private javax.swing.ButtonGroup optGroupDirection;
    private javax.swing.ButtonGroup optGroupSearchMode;
    private javax.swing.JRadioButton optSearchNormal;
    private javax.swing.JRadioButton optSearchRegularExpression;
    // End of variables declaration//GEN-END:variables
}
